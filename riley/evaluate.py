# -*- coding: utf-8 -*-
"""evaluate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PT5UQUo8ahjw5qRYXZSbd04-qFeyrX7x
"""

import torch
import torch.nn as nn
from pre_process import create_dataloaders
from model import RBFNetwork

def evaluate_model(model, data_loader, device):
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for features, labels in data_loader:
            features = features.to(device)
            labels = labels.argmax(dim=1).to(device)
            outputs = model(features)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    accuracy = 100 * correct / total
    print(f"Accuracy: {accuracy:.2f}%")
    return accuracy

if __name__ == "__main__":
    # Create data loaders.
    _, valid_dl, test_dl, _ = create_dataloaders()

    # For evaluation, we need the same input dimension and num_classes.
    sample_feature, sample_label = next(iter(valid_dl))
    input_dim = sample_feature.numel() // sample_feature.shape[0]
    num_classes = sample_label.shape[1]

    # Set up device.
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # Initialize the model and load trained weights.
    model_full = RBFNetwork(input_dim=input_dim,
                            num_rbf_units=256,
                            num_classes=num_classes,
                            gamma=0.1,
                            hidden_dim=512,
                            dropout_prob=0.5).to(device)
    model_full.load_state_dict(torch.load("rbf_model.pth", map_location=device))

    print("Validation Set Evaluation:")
    evaluate_model(model_full, valid_dl, device)

    print("\nTest Set Evaluation:")
    evaluate_model(model_full, test_dl, device)